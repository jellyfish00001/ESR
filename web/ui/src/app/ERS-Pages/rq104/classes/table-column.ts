import { TableColumnModel } from 'src/app/shared/models';
import { GeneralExpenseInfo } from './data-item';

export const AccountingDetailTableColumn: TableColumnModel[]  = [
  {
    title: 'Sequence No',
    columnKey: 'seq',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.seq - b.seq,
  },
  {
    title: 'Document Date',
    columnKey: 'docdate',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.docdate.localeCompare(b.docdate),
  },
  {
    title: 'Posting Date',
    columnKey: 'postdate',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.postdate.localeCompare(b.postdate),
  },
  {
    title: 'Company',
    columnKey: 'companysap',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.companysap.localeCompare(b.companysap),
  },
  {
    title: 'Currency',
    columnKey: 'basecurr',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.basecurr.localeCompare(b.basecurr),
  },
  {
    title: 'Exchange Rate',
    columnKey: 'rate',
    columnWidth: '100px',
    align: 'right',
    sortFn: (a: any, b: any) => a.rate - b.rate,
  },
  {
    title: 'Reference',
    columnKey: 'ref',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.ref.localeCompare(b.ref),
  },
  {
    title: 'Document Header Text',
    columnKey: 'dochead',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.dochead.localeCompare(b.dochead),
  },
  {
    title: 'Document Type',
    columnKey: 'doctyp',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.doctyp.localeCompare(b.doctyp),
  },
  {
    title: 'Posting Key',
    columnKey: 'postkey',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.postkey.localeCompare(b.postkey),
  },
  {
    title: 'Account Number',
    columnKey: 'acctant',
    columnWidth: '100px',
    align: 'right',
    sortFn: (a: any, b: any) => a.acctant - b.acctant,
  },
  {
    title: 'Special GL Indicator',
    columnKey: 'specgl',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.specgl.localeCompare(b.specgl),
  },
  {
    title: 'Amount in Document Currency',
    columnKey: 'actamt1',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.actamt1 - b.actamt1,
  },
  {
    title: 'Amount in Local Currency',
    columnKey: 'actamt2',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.actamt2 - b.actamt2,
  },
  {
    title: 'Payment Term',
    columnKey: 'payterm',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.payterm.localeCompare(b.payterm),
  },
  {
    title: 'Payment Method',
    columnKey: 'paytyp',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.paytyp.localeCompare(b.paytyp),
  },
  {
    title: 'Base Line Date',
    columnKey: 'baslindate',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.baslindate - b.baslindate,
  },
  {
    title: 'Tax Code',
    columnKey: 'txtcode',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.txtcode.localeCompare(b.txtcode),
  },
  {
    title: 'Tax Base Amount',
    columnKey: 'taxamt1',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.taxamt1 - b.taxamt1,
  },
  {
    title: 'LC Tax Base Amount',
    columnKey: 'taxamt2',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.taxamt2 - b.taxamt2,
  },
  {
    title: 'Withholding Tax Type',
    columnKey: 'wtaxtyp',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.wtaxtyp.localeCompare(b.wtaxtyp),
  },
  {
    title: 'Withholding Tax Code',
    columnKey: 'wtaxcode',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.wtaxcode.localeCompare(b.wtaxcode),
  },
  {
    title: 'Withholding Tax Base Amount',
    columnKey: 'wtaxamt1',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.wtaxamt1 - b.wtaxamt1,
  },
  {
    title: 'Withholding Tax Amount',
    columnKey: 'wtaxamt2',
    columnWidth: '150px',
    align: 'right',
    sortFn: (a: any, b: any) => a.wtaxamt2 - b.wtaxamt2,
  },
  {
    title: 'Cost Center',
    columnKey: 'costcenter',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.costCenter.localeCompare(b.costCenter),
  },
  {
    title: 'Order',
    columnKey: 'order',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.order.localeCompare(b.order),
  },
  {
    title: 'Line Text',
    columnKey: 'linetext',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.linetext.localeCompare(b.linetext),
  },
  {
    title: 'Assignment Number',
    columnKey: 'asinmnt',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.asinmnt.localeCompare(b.asinmnt),
  },
  {
    title: 'Profit Center',
    columnKey: 'proficenter1',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.proficenter1.localeCompare(b.proficenter1),
  },
  {
    title: 'Partner Profit Center',
    columnKey: 'proficenter2',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.proficenter2.localeCompare(b.proficenter2),
  },
  {
    title: 'Customer Code',
    columnKey: 'custercode',
    columnWidth: '150px',
    align: 'left',
    sortFn: (a: any, b: any) => a.custercode.localeCompare(b.custercode),
  },
  {
    title: 'Plant',
    columnKey: 'plant',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.plant.localeCompare(b.plant),
  },
  {
    title: 'Business Type',
    columnKey: 'busityp',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.busityp.localeCompare(b.busityp),
  },
  {
    title: 'End Customer',
    columnKey: 'ecuster',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.ecuster.localeCompare(b.ecuster),
  },
  {
    title: 'Material Division',
    columnKey: 'mtrldiv',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.mtrldiv.localeCompare(b.mtrldiv),
  },
  {
    title: 'Sales Division',
    columnKey: 'salsdiv',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.salsdiv.localeCompare(b.salsdiv),
  },
  {
    title: 'Reference 1',
    columnKey: 'ref1',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.ref1.localeCompare(b.ref1),
  },
  {
    title: 'Reference 2',
    columnKey: 'ref2',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.ref2.localeCompare(b.ref2),
  },
  {
    title: 'Reference 3',
    columnKey: 'ref3',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.ref3.localeCompare(b.ref3),
  },
  {
    title: 'Unify Code',
    columnKey: 'unifycode',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.unifycode.localeCompare(b.unifyunifycodeCode),
  },
  {
    title: 'Certificate',
    columnKey: 'certificate',
    columnWidth: '100px',
    align: 'left',
    sortFn: (a: any, b: any) => a.certificate.localeCompare(b.certificate),
  },
];

export const ExpenseTableColumn: TableColumnModel[] = [
  {
    title: ('expname'),
    columnKey: 'sceneName',
    columnWidth: '100px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.scene.localeCompare(b.scene),
  },
  {
    title: ('date-of-expense'),
    columnKey: 'feeDate',
    columnWidth: '120px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.feeDate.localeCompare(b.feeDate),
  },
  {
    title: ('reimbursement-scene'),
    columnKey: 'sceneName',
    columnWidth: '120px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.scene.localeCompare(b.scene),
  },
  // {
  //   title: ('companyCode'),
  //   columnKey: 'companyCode',
  //   columnWidth: '120px',
  //   align: 'center',
  //   sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.companyCode.localeCompare(b.companyCode),
  // },
  {
    title: ('col.currency'),
    columnKey: 'curr',
    columnWidth: '90px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.curr.localeCompare(b.curr),
  },
  {
    title: ('col.expense-attribution-department'),
    columnKey: 'attribDept',
    columnWidth: '120px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.attribDept.localeCompare(b.attribDept),
  },
  {
    title: ('percent'),
    columnKey: 'percent',
    columnWidth: '110px',
    align: 'center',
    sortFn: null,
  },
  {
    title: ('reimbursement-amount'),
    columnKey: 'expenseAmt',
    columnWidth: '150px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.expenseAmt - b.expenseAmt,
  },
  {
    title: ('col.conversion-to-local-currency'),
    columnKey: 'toLocalAmt',
    columnWidth: '110px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.toLocalAmt - b.toLocalAmt,
  },
  {
    title: ('col.exchange-rate'),
    columnKey: 'exchangeRate',
    columnWidth: '100px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.exchangeRate - b.exchangeRate,
  },
  {
    title: ('digest'),
    columnKey: 'digest',
    columnWidth: '80px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.digest.localeCompare(b.digest),
  },
  {
    title: ('individual-responsibility-for-taxes'),
    columnKey: 'selfTaxAmt',
    columnWidth: '120px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.selfTaxAmt - b.selfTaxAmt,
  },
  {
    title: ('actual-reimbursable-amount'),
    columnKey: 'actualAmt',
    columnWidth: '150px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.actualAmt - b.actualAmt,
  },
  {
    title: ('advance-fund-no'),
    columnKey: 'advanceRno',
    columnWidth: '120px',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.advanceRno.localeCompare(b.advanceRno),
  },
  // {
  //   title: ('invoice-no'),
  //   columnKey: 'invoiceNo',
  //   columnWidth: '120px',
  //   align: 'center',
  //   sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.invoiceNo.localeCompare(b.invoiceNo),
  // },
];

export const OvertimeMealExpenseTableColumn: TableColumnModel[] = [
  {
    title: ('expname'),
    columnKey: 'sceneName',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.scene.localeCompare(b.scene),
  },
  {
    title: ('col.expense-attribution-department'),
    columnKey: 'attribDept',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.attribDept.localeCompare(b.attribDept),
  },
  {
    title: ('percent'),
    columnKey: 'percent',
    columnWidth: '',
    align: 'center',
    sortFn: null,
  },
  {
    title: ('city-on-business'),
    columnKey: 'cityOnBusiness',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.cityOnBusiness.localeCompare(b.cityOnBusiness),
  },
  {
    title: ('date-of-expense'),
    columnKey: 'feeDate',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.feeDate.localeCompare(b.feeDate),
  },
  {
    title: ('start-time'),
    columnKey: 'startingTime',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.startingTime.localeCompare(b.startingTime),
  },
  {
    title: ('back-time'),
    columnKey: 'backTime',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.backTime.localeCompare(b.backTime),
  },
  {
    title: ('col.currency'),
    columnKey: 'curr',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.curr.localeCompare(b.curr),
  },
  {
    title: ('reimbursement-amount'),
    columnKey: 'expenseAmt',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.expenseAmt - b.expenseAmt,
  },
  {
    title: ('col.exchange-rate'),
    columnKey: 'exchangeRate',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.exchangeRate - b.exchangeRate,
  },
  {
    title: ('col.conversion-to-local-currency'),
    columnKey: 'toLocalAmt',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.toLocalAmt - b.toLocalAmt,
  },
  {
    title: ('digest'),
    columnKey: 'digest',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.digest.localeCompare(b.digest),
  },
  {
    title: ('advance-fund-no'),
    columnKey: 'advanceRno',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.advanceRno.localeCompare(b.advanceRno),
  },
];

export const DriveFuelExpenseTableColumn: TableColumnModel[] = [
  {
    title: ('expname'),
    columnKey: 'sceneName',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.scene.localeCompare(b.scene),
  },
  {
    title: ('col.expense-attribution-department'),
    columnKey: 'attribDept',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.attribDept.localeCompare(b.attribDept),
  },
  {
    title: ('percent'),
    columnKey: 'percent',
    columnWidth: '',
    align: 'center',
    sortFn: null,
  },
  {
    title: ('starting-place'),
    columnKey: 'startingPlace',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.startingPlace.localeCompare(b.startingPlace),
  },
  {
    title: ('date-of-expense'),
    columnKey: 'feeDate',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.feeDate.localeCompare(b.feeDate),
  },
  {
    title: ('vehicle-type'),
    columnKey: 'carTypeName',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.carTypeName.localeCompare(b.carTypeName),
  },
  {
    title: ('kil'),
    columnKey: 'kil',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.kil - b.kil,
  },
  {
    title: ('col.currency'),
    columnKey: 'curr',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.curr.localeCompare(b.curr),
  },
  {
    title: ('reimbursement-amount'),
    columnKey: 'expenseAmt',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.expenseAmt - b.expenseAmt,
  },
  {
    title: ('col.exchange-rate'),
    columnKey: 'exchangeRate',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.exchangeRate - b.exchangeRate,
  },
  {
    title: ('col.conversion-to-local-currency'),
    columnKey: 'toLocalAmt',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.toLocalAmt - b.toLocalAmt,
  },
  {
    title: ('digest'),
    columnKey: 'digest',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.digest.localeCompare(b.digest),
  },
  {
    title: ('advance-fund-no'),
    columnKey: 'advanceRno',
    columnWidth: '',
    align: 'center',
    sortFn: (a: GeneralExpenseInfo, b: GeneralExpenseInfo) => a.advanceRno.localeCompare(b.advanceRno),
  },
];
