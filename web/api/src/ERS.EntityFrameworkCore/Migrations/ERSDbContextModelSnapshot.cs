// <auto-generated />
using System;
using ERS.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace ERS.Migrations
{
    [DbContext(typeof(ERSDbContext))]
    partial class ERSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ERS.Entities.AppConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("remark")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("value")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("appconfig");
                });

            modelBuilder.Entity("ERS.Entities.ApprovalAssignedApprover", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("approver_deptid")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("approver_emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("approver_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("flow_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("approval_assigned_approver");

                    b.HasComment("簽核流程主檔");
                });

            modelBuilder.Entity("ERS.Entities.ApprovalFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("aassignedemplid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("approvedate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("approverdeptid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("approveremplid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("approvername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("assignedapprovername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("assigneddeptid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("comment")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("nextflowid")
                        .HasColumnType("uuid");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal>("step")
                        .HasColumnType("numeric(8,0)");

                    b.Property<string>("stepname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("approval_flow");

                    b.HasComment("簽核流程主檔");
                });

            modelBuilder.Entity("ERS.Entities.ApprovalPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("aemplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("实际签核人");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("签核人");

                    b.Property<string>("formcode")
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("A（同意）R（拒签）C（取消）P（待签）");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx");

                    b.ToTable("approval_paper");
                });

            modelBuilder.Entity("ERS.Entities.AuthMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("ispublic")
                        .HasColumnType("boolean")
                        .HasComment("是否为公共菜单");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("menukey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("菜单key");

                    b.Property<string>("menuname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("菜单名称");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("auth_menu");
                });

            modelBuilder.Entity("ERS.Entities.AuthRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rolekey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("角色key");

                    b.Property<string>("rolename")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("角色名称");

                    b.HasKey("Id");

                    b.ToTable("auth_role");
                });

            modelBuilder.Entity("ERS.Entities.AuthRoleApi", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("apikey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("apikey");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rolekey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("角色key");

                    b.HasKey("Id");

                    b.ToTable("auth_role_api");
                });

            modelBuilder.Entity("ERS.Entities.AuthRoleMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("menukey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("菜单key");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rolekey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("角色key");

                    b.HasKey("Id");

                    b.ToTable("auth_role_menu");
                });

            modelBuilder.Entity("ERS.Entities.AuthUserCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("module")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("适用模块,application申请单,finance财务权限用");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("userkey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("用户key");

                    b.HasKey("Id");

                    b.ToTable("auth_user_company");
                });

            modelBuilder.Entity("ERS.Entities.AuthUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rolekey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("角色key");

                    b.Property<string>("userkey")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("用户key");

                    b.HasKey("Id");

                    b.ToTable("auth_user_role");
                });

            modelBuilder.Entity("ERS.Entities.Bank.ComBank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("banid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("銀行名稱");

                    b.Property<string>("bank_abbr")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("銀行簡稱");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("vendercode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("combank");
                });

            modelBuilder.Entity("ERS.Entities.BdAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("acctname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "acctcode" }, "acctcode_idx");

                    b.ToTable("bdaccount");
                });

            modelBuilder.Entity("ERS.Entities.BDCar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("补助金额（每公里）");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("类型名称");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("bd_car");
                });

            modelBuilder.Entity("ERS.Entities.BDCashReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx1");

                    b.ToTable("bd_cash_return");
                });

            modelBuilder.Entity("ERS.Entities.BDCompanyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("area")
                        .HasComment("地区");

                    b.Property<string>("BaseCurrency")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("base_currency")
                        .HasComment("本位币");

                    b.Property<string>("CompanyCategory")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("company_category")
                        .HasComment("公司别");

                    b.Property<string>("CompanyDesc")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("company_desc")
                        .HasComment("公司名称");

                    b.Property<string>("CompanySap")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("company_sap")
                        .HasComment("Sap公司代码");

                    b.Property<string>("IdentificationNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("identification_no")
                        .HasComment("纳税人识别号");

                    b.Property<decimal>("IncomeTaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("income_tax_rate")
                        .HasComment("所得税税率");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("status")
                        .HasComment("状态");

                    b.Property<string>("Stwit")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("stwit")
                        .HasComment("缩写");

                    b.Property<int>("TimeZone")
                        .HasColumnType("integer")
                        .HasColumnName("time_zone")
                        .HasComment("时区");

                    b.Property<decimal>("Vatrate")
                        .HasColumnType("numeric")
                        .HasColumnName("vatrate")
                        .HasComment("增值税率");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyCategory" }, "bd_company_category_idx");

                    b.ToTable("bd_company_category");
                });

            modelBuilder.Entity("ERS.Entities.BDCompanySite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("company")
                        .HasComment("公司");

                    b.Property<string>("CompanyCategory")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("company_category")
                        .HasComment("公司别");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary")
                        .HasComment("主要公司别");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("site")
                        .HasComment("工作地");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyCategory" }, "bd_company_site_idx_companyCategory");

                    b.ToTable("bd_company_site");
                });

            modelBuilder.Entity("ERS.Entities.BdExp", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("addsign")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("加簽工号");

                    b.Property<string>("addsignstep")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("加簽步骤");

                    b.Property<string>("assignment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("authorized")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("被授权人");

                    b.Property<string>("authorizer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("授权人");

                    b.Property<int>("calmethod")
                        .HasColumnType("integer")
                        .HasComment("计算方式：（1：今天-预支付款日期，2：今天-预期冲账日期）");

                    b.Property<int>("category")
                        .HasColumnType("integer")
                        .HasComment("類型區分：1.報銷 2.預支 3.薪资请款");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("classno")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("costcenter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("datelevel")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("预支冲账日期是否卡关（Y/N）");

                    b.Property<int>("departday")
                        .HasColumnType("integer")
                        .HasComment("部门逾期天数");

                    b.Property<string>("description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("費用說明");

                    b.Property<string>("descriptionnotice")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("摘要提示");

                    b.Property<DateTime?>("edate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("授权结束日期");

                    b.Property<int>("expcategory")
                        .HasColumnType("integer")
                        .HasComment("报销填写界面：（1：公出误餐费，2：自驾油费）");

                    b.Property<string>("expcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("expdesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("費用描述​");

                    b.Property<string>("expname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("filecategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("附件类型");

                    b.Property<string>("filepoints")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("附件審核要點");

                    b.Property<string>("flag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("0: NON VaT 1 :VAT");

                    b.Property<string>("invoicecategory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("發票類型");

                    b.Property<string>("invoiceflag")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("0 NONE Generate Invoice , 1 System Generate Invoice");

                    b.Property<string>("invter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("invited by user");

                    b.Property<string>("isdeduction")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("稅金抵扣(Y/N)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("isinvoice")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否有發票(Y/N)");

                    b.Property<string>("issendremindemail")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否发送提醒交件email");

                    b.Property<string>("isupload")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("附件是否必须上传(Y/N)");

                    b.Property<string>("iszerotaxinvter")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("The control invoice is zero tax rate and tax exemption rate. Check the box to indicate 'Y', no check to indicate 'N'.");

                    b.Property<string>("keyword")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("pjcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("sdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("授权开始日期");

                    b.Property<int>("sectionday")
                        .HasColumnType("integer")
                        .HasComment("处级逾期天数");

                    b.Property<string>("special")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Expense Type to Special control");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.Property<string>("type")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("'0':除大量報銷外都可以見；‘1’：只有大量報銷可見；‘2’：所有類型都可見");

                    b.Property<string>("wording")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "company", "expcode" }, "company_expcode_idx");

                    b.ToTable("bdexp");
                });

            modelBuilder.Entity("ERS.Entities.BDExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpenseCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("expense_code")
                        .HasComment("費用類別代碼");

                    b.Property<string>("ExpenseDescription")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_description")
                        .HasComment("費用類別說明");

                    b.Property<string>("ExpenseName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name")
                        .HasComment("費用類別名稱");

                    b.Property<string>("ExpenseNameCz")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name_cz")
                        .HasComment("費用類別名稱(捷克文)");

                    b.Property<string>("ExpenseNameEs")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name_es")
                        .HasComment("費用類別名稱(西文)");

                    b.Property<string>("ExpenseNameVn")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name_vn")
                        .HasComment("費用類別名稱(越文)");

                    b.Property<string>("ExpenseNameZhcn")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name_zhcn")
                        .HasComment("費用類別名稱(簡中)");

                    b.Property<string>("ExpenseNameZhtw")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("expense_name_zhtw")
                        .HasComment("費用類別名稱(繁中)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExpenseCode" }, "bd_expense_idx_expense_code");

                    b.HasIndex(new[] { "ExpenseName" }, "bd_expense_idx_expense_name");

                    b.ToTable("bd_expense");
                });

            modelBuilder.Entity("ERS.Entities.BDExpenseDept", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("部門代碼");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("isvirtualdept")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否為虛擬部門");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_expense_department");
                });

            modelBuilder.Entity("ERS.Entities.BDExpenseSenario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("accountcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("會計科目");

                    b.Property<string>("assignment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Assignment");

                    b.Property<string>("attachmentname")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("上傳附件名稱");

                    b.Property<string>("attachmentnotice")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("上傳附件提示");

                    b.Property<string>("auditlevelcode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasComment("核決權限代碼");

                    b.Property<string>("authorized")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("被授权人");

                    b.Property<string>("authorizer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("授权人");

                    b.Property<int>("calmethod")
                        .HasColumnType("integer")
                        .HasComment("计算方式：（1：今天-预支付款日期，2：今天-预期冲账日期）");

                    b.Property<bool>("canbypassfinanceapproval")
                        .HasColumnType("boolean")
                        .HasComment("是否可跳過會計簽核");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("分類 reimbursement/ advance/ payroll/ mass");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("companycategory")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("公司別");

                    b.Property<string>("costcenter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Cost center");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("datelevel")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("预支冲账日期是否卡关（Y/N）預支沖帳日期是否需限制於一個月內");

                    b.Property<int>("departday")
                        .HasColumnType("integer")
                        .HasComment("部门逾期天数");

                    b.Property<string>("descriptionnotice")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("摘要提示");

                    b.Property<DateTime?>("edate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("授权结束日期");

                    b.Property<string>("expensecode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("費用類別代碼");

                    b.Property<int>("extraformcode")
                        .HasColumnType("integer")
                        .HasComment("報銷模塊");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isvatdeductable")
                        .HasColumnType("boolean")
                        .HasComment("是否可抵扣稅金");

                    b.Property<string>("keyword")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("關鍵字");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("projectcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Project code");

                    b.Property<bool>("requiresattachment")
                        .HasColumnType("boolean")
                        .HasComment("是否需上傳附件");

                    b.Property<bool>("requiresinvoice")
                        .HasColumnType("boolean")
                        .HasComment("是否需附上發票憑證");

                    b.Property<bool>("requirespaperattachment")
                        .HasColumnType("boolean")
                        .HasComment("是否需繳交紙本附件");

                    b.Property<DateTime?>("sdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("授权开始日期");

                    b.Property<int>("sectionday")
                        .HasColumnType("integer")
                        .HasComment("处级逾期天数");

                    b.Property<string>("senarioname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("報銷情景名稱");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "expensecode" }, "bd_expense_senario_idx_expensecode");

                    b.HasIndex(new[] { "senarioname" }, "bd_expense_senario_idx_senarioname");

                    b.ToTable("bd_expense_senario");
                });

            modelBuilder.Entity("ERS.Entities.BDExpID", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("會計科目代碼");

                    b.Property<string>("bank")
                        .HasColumnType("text")
                        .HasComment("銀行別 （付款方式現金：Cash）");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("companycode")
                        .HasColumnType("text")
                        .HasComment("公司別代碼");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("expcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("費用代碼");

                    b.Property<string>("identification")
                        .HasColumnType("text")
                        .HasComment("入賬 identification");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_exp_identification");
                });

            modelBuilder.Entity("ERS.Entities.BDForm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationMenuKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("application_menu_key")
                        .HasComment("填单页面MenuKey");

                    b.Property<string>("FormCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("form_code")
                        .HasComment("单据Code");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("form_name")
                        .HasComment("单据名称");

                    b.Property<string>("NoFormat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("no_format")
                        .HasComment("单号格式");

                    b.Property<string>("SignMenuKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sign_menu_key")
                        .HasComment("签核页面MenuKey");

                    b.Property<string>("Valid")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("valid")
                        .HasComment("是否启用");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_form");
                });

            modelBuilder.Entity("ERS.Entities.BDInvoiceFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("abnormalreason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("異常原因");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("含稅總金額");

                    b.Property<string>("buyername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("購貨方名稱");

                    b.Property<string>("buyertaxid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("購買方稅號");

                    b.Property<string>("category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("attachment category");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("幣別");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("docno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("付款清單號");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("發票歸屬人");

                    b.Property<string>("endstation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("抵達站");

                    b.Property<bool>("existautopa")
                        .HasColumnType("boolean")
                        .HasComment("是否存在发票池");

                    b.Property<string>("filepath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("發票路徑");

                    b.Property<string>("identificationno")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("票據識別碼");

                    b.Property<decimal?>("importtaxamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("進口稅");

                    b.Property<string>("invcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票代碼");

                    b.Property<DateTime?>("invdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("發票日期");

                    b.Property<string>("invno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票號碼");

                    b.Property<string>("invoicetitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("發票標題");

                    b.Property<string>("invtype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票類型名稱");

                    b.Property<string>("invtypecode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票類型代碼");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isedit")
                        .HasColumnType("boolean")
                        .HasComment("申请过单据后是否再次编辑过");

                    b.Property<bool>("isfill")
                        .HasColumnType("boolean")
                        .HasComment("是否填補發票信息");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ocrid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("OCR識別記錄表ID");

                    b.Property<string>("paytype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票請款狀態");

                    b.Property<DateTime?>("postingdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("付款時間");

                    b.Property<string>("productinfo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("商品資訊");

                    b.Property<decimal?>("quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("數量");

                    b.Property<string>("region")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("發票區域");

                    b.Property<string>("remark")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("備註");

                    b.Property<string>("remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("備註");

                    b.Property<string>("responsibleparty")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("承擔方");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sellername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("銷售方名稱");

                    b.Property<string>("sellertaxid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("銷售方稅號");

                    b.Property<decimal?>("servicefee")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("服務費/推廣貿易服務費");

                    b.Property<decimal?>("shippingfee")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("運輸費");

                    b.Property<string>("source")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("票據來源");

                    b.Property<string>("startstation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("出發站");

                    b.Property<decimal>("taxamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("稅額");

                    b.Property<decimal?>("taxbase")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("taxbase")
                        .HasComment("營業/增值税基");

                    b.Property<decimal?>("taxrate")
                        .HasColumnType("numeric")
                        .HasComment("税率");

                    b.Property<string>("taxtype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("課稅別");

                    b.Property<decimal?>("transactionfee")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("手續費");

                    b.Property<decimal>("untaxamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("不含稅金額");

                    b.Property<int>("uploadmethod")
                        .HasColumnType("integer")
                        .HasComment("1.全電票 2.鏈接 3.上傳檔案 4.手動輸入");

                    b.Property<string>("verifytype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("發票核驗狀態");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "identificationno" }, "bd_invoice_folder_idx_identificationno");

                    b.HasIndex(new[] { "invno" }, "bd_invoice_folder_idx_invno_idx");

                    b.HasIndex(new[] { "ocrid" }, "bd_invoice_folder_idx_ocrid");

                    b.ToTable("bd_invoice_folder");
                });

            modelBuilder.Entity("ERS.Entities.BDInvoiceRail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("formatcode")
                        .HasColumnType("decimal")
                        .HasComment("格式代码");

                    b.Property<string>("invoicerail")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("发票字轨");

                    b.Property<string>("invoicetype")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("发票类型");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("month")
                        .HasColumnType("decimal")
                        .HasComment("月份");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("qi")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("期");

                    b.Property<decimal>("year")
                        .HasColumnType("decimal")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("bd_invoice_rail");
                });

            modelBuilder.Entity("ERS.Entities.BDInvoiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("area")
                        .HasComment("区域");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("category")
                        .HasComment("分类");

                    b.Property<string>("InvType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inv_type")
                        .HasComment("发票类型名稱");

                    b.Property<string>("InvTypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("inv_type_code")
                        .HasComment("发票類型代码");

                    b.Property<string>("SellerTaxId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("seller_tax_id")
                        .HasComment("賣方統編/稅號");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_invoice_type");
                });

            modelBuilder.Entity("ERS.Entities.BDMealArea", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("补助金额");

                    b.Property<string>("area")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("地区");

                    b.Property<DateTime?>("backtime1")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("返回时间");

                    b.Property<DateTime?>("backtime2")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("返回时间");

                    b.Property<int>("backtype1")
                        .HasColumnType("integer")
                        .HasComment("-1：前；1：后");

                    b.Property<int>("backtype2")
                        .HasColumnType("integer")
                        .HasComment("-1：前；1：后");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("城市");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("币别");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("gotime1")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("出发时间");

                    b.Property<DateTime?>("gotime2")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("出发时间");

                    b.Property<int>("gotype1")
                        .HasColumnType("integer")
                        .HasComment("-1：前；1：后");

                    b.Property<int>("gotype2")
                        .HasColumnType("integer")
                        .HasComment("-1：前；1：后");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_meal_area");
                });

            modelBuilder.Entity("ERS.Entities.BDPaperSign", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company_code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("bd_paper_sign");
                });

            modelBuilder.Entity("ERS.Entities.BdPayTyp", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("payname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("paytyp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.HasKey("Id");

                    b.ToTable("bdpaytyp");
                });

            modelBuilder.Entity("ERS.Entities.BDSignlevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("幣別");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("item")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasComment("呈核項目");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("money")
                        .HasColumnType("numeric(20,4)")
                        .HasComment("簽核金額");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("signlevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("簽核層級");

                    b.HasKey("Id");

                    b.ToTable("bd_signlevel");
                });

            modelBuilder.Entity("ERS.Entities.BDTaxRate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sapcode")
                        .HasColumnType("text");

                    b.Property<decimal?>("taxrate")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("bd_taxrate");
                });

            modelBuilder.Entity("ERS.Entities.BDTicketRail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currentnumber")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasComment("当前序号");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ticketrail")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasComment("车票字轨");

                    b.Property<string>("vouchermonth")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasComment("凭证月份");

                    b.Property<string>("voucheryear")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasComment("凭证年份");

                    b.HasKey("Id");

                    b.ToTable("bd_ticket_rail");
                });

            modelBuilder.Entity("ERS.Entities.BDTreelevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("levelcnname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("簽核層級名稱(簡中)");

                    b.Property<string>("levelname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("簽核層級名稱(英文)");

                    b.Property<decimal>("levelnum")
                        .HasColumnType("numeric(2,0)")
                        .HasComment("簽核層級編號");

                    b.Property<string>("leveltwname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("簽核層級名稱(繁中)");

                    b.HasKey("Id");

                    b.ToTable("bd_treelevel");
                });

            modelBuilder.Entity("ERS.Entities.BDVender", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UnifyCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unify_code")
                        .HasComment("统一编号");

                    b.Property<string>("VenderCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vender_code")
                        .HasComment("供应商编号");

                    b.Property<string>("VenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("vender_name")
                        .HasComment("供应商名称");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UnifyCode" }, "bd_vender_idx_unifyCode");

                    b.ToTable("bd_vender");
                });

            modelBuilder.Entity("ERS.Entities.CashAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("account")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("accountname")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasComment("户名");

                    b.Property<string>("bank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("effdt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("udate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("uuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "emplid" }, "emplid_idx");

                    b.ToTable("cash_account");
                });

            modelBuilder.Entity("ERS.Entities.CashAccountPs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("account")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("accountname")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasComment("户名");

                    b.Property<string>("bank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("effdt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("udate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("uuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("cash_account_ps");
                });

            modelBuilder.Entity("ERS.Entities.CashAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("actamt")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("actpay")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx2");

                    b.ToTable("cash_amount");
                });

            modelBuilder.Entity("ERS.Entities.CashCarrydetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctant")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Accountant");

                    b.Property<string>("acctcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Acct. code (GL Acct), 默認vendor為Z800003");

                    b.Property<decimal>("actamt1")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Actual pay amount,Amount In Document Currency (include tax amount), 實際支付金額");

                    b.Property<decimal>("actamt2")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Amount In Local Currency (include tax amount), 實際支付金額");

                    b.Property<string>("asinmnt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Assignment number");

                    b.Property<string>("bank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Bank name");

                    b.Property<string>("basecurr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("base currency, 本位幣");

                    b.Property<DateTime>("baslindate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Base line date, 生成入帳清單日期");

                    b.Property<string>("busityp")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Business Type");

                    b.Property<int>("carritem")
                        .HasColumnType("integer");

                    b.Property<string>("carryno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("certificate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("certificate");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("companysap")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("SAP company code,公司別");

                    b.Property<string>("costcenter")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Cost center, ZS+掛賬部門");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("custercode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Customer Code (ie. Bill-to Party)");

                    b.Property<DateTime>("docdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Document date,費用發生日期");

                    b.Property<string>("dochead")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Document Header Text");

                    b.Property<string>("doctyp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Document Type, 默認為KR");

                    b.Property<string>("ecuster")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("End customer");

                    b.Property<string>("excelline")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Excel Line Item No");

                    b.Property<string>("formcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("Form code");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("linetext")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Line Text, 摘要");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("mtrldiv")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Material Division");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("order")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Order");

                    b.Property<string>("payterm")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Payment Term");

                    b.Property<string>("paytyp")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Pay type,Payment Method, 默認為T");

                    b.Property<string>("plant")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("postdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Posting date, 生成入帳清單日期");

                    b.Property<string>("postkey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Posting key, vendor貸方默認為31，洽談借方默認為40，貸方默認為50");

                    b.Property<string>("proficenter1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Profit Center");

                    b.Property<string>("proficenter2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Partner Profit Center");

                    b.Property<int>("pstitem")
                        .HasColumnType("integer");

                    b.Property<decimal>("rate")
                        .HasColumnType("numeric(10,5)")
                        .HasComment("exchange rate, 默認為1");

                    b.Property<string>("ref")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Reference 3, ERS申請單號");

                    b.Property<string>("ref1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Reference 1, 收款人工號");

                    b.Property<string>("ref2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Reference 2");

                    b.Property<string>("ref3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rnostatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("'Y': Edit , 'N': can not Edit");

                    b.Property<string>("salsdiv")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Sales Division");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("specgl")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Special G/L Indicator");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.Property<decimal?>("taxamt1")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Tax Base Amount");

                    b.Property<decimal?>("taxamt2")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("LC Tax Base Amount");

                    b.Property<string>("tradingpartner")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Trading Partner (at header level)");

                    b.Property<string>("txtcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Tax code");

                    b.Property<string>("unifycode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("UnifyCode");

                    b.Property<decimal?>("wtaxamt1")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Withholding tax base amount");

                    b.Property<decimal?>("wtaxamt2")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Withholding tax amount");

                    b.Property<string>("wtaxcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Withholding tax code");

                    b.Property<string>("wtaxtyp")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Withholding tax type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "carryno" }, "carryno_idx");

                    b.ToTable("cash_carrydetail");
                });

            modelBuilder.Entity("ERS.Entities.CashCarryhead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctant")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Accountant");

                    b.Property<string>("bank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Bank name");

                    b.Property<string>("carryno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("companycode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("postdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("stat")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "carryno" }, "carryno_idx")
                        .HasDatabaseName("carryno_idx1");

                    b.ToTable("cash_carryhead");
                });

            modelBuilder.Entity("ERS.Entities.CashCurrency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency_desc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cash_currency");
                });

            modelBuilder.Entity("ERS.Entities.CashDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("destination")
                        .HasComment("终点");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("origin")
                        .HasComment("起点");

                    b.Property<string>("Passenger")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("passenger")
                        .HasComment("乘车人");

                    b.Property<string>("acctcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("acctname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("actualexpense")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("实际支出 Actual Expense");

                    b.Property<decimal?>("advanceamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Batch Pay Advance Amount");

                    b.Property<decimal?>("advancebaseamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("ADVANCEBaseAMOUNT");

                    b.Property<string>("advancecurrency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("advancerno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("预支单号");

                    b.Property<string>("agentEmplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("agentemplid")
                        .HasComment("承辦人工號");

                    b.Property<decimal?>("amount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Reimbursement amount(实际报销)");

                    b.Property<decimal?>("amount1")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("user key in amount");

                    b.Property<decimal?>("amount2")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("accountant key in amount");

                    b.Property<string>("assignment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("backtime")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("回到时间(公出誤餐費)");

                    b.Property<string>("bank")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("baseamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("base amount");

                    b.Property<string>("basecurr")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("base currency");

                    b.Property<string>("billNoAndSummary")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("billnoandsummary")
                        .HasComment("提單號碼/費用摘要");

                    b.Property<int>("cartype")
                        .HasColumnType("integer")
                        .HasComment("车型 (自駕油費）");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("城市(公出誤餐費)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("companycode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("公司别代码");

                    b.Property<string>("currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("custsuperme")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("customer superme");

                    b.Property<string>("datediffreason")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("时间差异原因");

                    b.Property<int>("delaydays")
                        .HasColumnType("integer")
                        .HasComment("延期天數");

                    b.Property<string>("delayreason")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasComment("延期原因");

                    b.Property<string>("deptid")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("expcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("expname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("flag")
                        .HasColumnType("integer")
                        .HasComment("0, other, 1.treat,2, treatcpbg");

                    b.Property<string>("formcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("gotime")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("出发时间(公出誤餐費)");

                    b.Property<DateTime?>("hospdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Hospitality Date");

                    b.Property<decimal?>("importTax")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("importtax")
                        .HasComment("進口稅/其他費用");

                    b.Property<string>("invoice")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("isaccordcost")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("是否符合費用規範 Y/N");

                    b.Property<string>("isaccordnumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("是否符合我方人數規範 Y/N");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("istemp")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否暂存(Y/N)");

                    b.Property<decimal?>("journey")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("路程数 (自駕油費）");

                    b.Property<string>("keep")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("keepcategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Supreme head of the category");

                    b.Property<decimal?>("keepsum")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("wistron how many people  join");

                    b.Property<decimal?>("lastexpense")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Actual Expense");

                    b.Property<string>("location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("起始目的地 (自駕油費）");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("notaccordreason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("不符合我方人數規範的原因");

                    b.Property<string>("object")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("objectsum")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("customer  how many people join");

                    b.Property<string>("otherkeep")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Treat other keep");

                    b.Property<string>("otherobject")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Treat other object");

                    b.Property<decimal?>("overbudget")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("超出預算金額");

                    b.Property<string>("payeeaccount")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("payeedeptid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("payeeid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("payeename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("paymentexpense")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("实际报销");

                    b.Property<string>("payname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("paytyp")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Pay type");

                    b.Property<decimal?>("pretaxamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("PreTaxAmount");

                    b.Property<string>("processmethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("不符合費用規範的选项");

                    b.Property<decimal?>("rate")
                        .HasColumnType("numeric(10,5)");

                    b.Property<DateTime?>("rdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Reimburse date");

                    b.Property<string>("remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("revsdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Scheduled reversal date");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("senarioid")
                        .HasColumnType("uuid");

                    b.Property<string>("senarioname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.Property<string>("summary")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("taxbaseamount")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("TAX BASE AMOUNT(稅基)");

                    b.Property<decimal?>("taxexpense")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Taxexpense");

                    b.Property<decimal?>("totalTaxAndFee")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("totaltaxandfee")
                        .HasComment("稅費合計");

                    b.Property<decimal?>("tradePromotionFee")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("tradepromotionfee")
                        .HasComment("推貿費");

                    b.Property<string>("treataddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Treat  Address");

                    b.Property<string>("treattime")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Treat  Time Bucket");

                    b.Property<string>("unifycode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx3");

                    b.ToTable("cash_detail");
                });

            modelBuilder.Entity("ERS.Entities.CashDetailPst", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("acctcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Acct. code (GL Acct)");

                    b.Property<string>("asinmnt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Assignment");

                    b.Property<decimal>("baseamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Base amount (Local)");

                    b.Property<string>("basecurr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Base currency (Local curr.)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("certificate")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("costcenter")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Cost center");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ddate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Document date");

                    b.Property<int>("detailitem")
                        .HasColumnType("integer");

                    b.Property<string>("expcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Expense category code");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("invoice")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("lctaxbase")
                        .HasColumnType("numeric(18,2)")
                        .HasComment(" LC tax base amount");

                    b.Property<string>("lintext")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Line Text");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("payeeid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("payee employee id");

                    b.Property<string>("postkey")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Posting key");

                    b.Property<int>("pstitem")
                        .HasColumnType("integer");

                    b.Property<string>("rdate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ref1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Reference UnifyCode");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.Property<decimal?>("taxbase")
                        .HasColumnType("numeric(18,2)")
                        .HasComment(" tax base amount");

                    b.Property<string>("txtcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Tax code");

                    b.Property<string>("unifycode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx4");

                    b.ToTable("cash_detail_pst");
                });

            modelBuilder.Entity("ERS.Entities.CashFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("attachment category");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("filename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("attachment file name");

                    b.Property<string>("filetype")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("attachment file type");

                    b.Property<string>("formcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ishead")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否head附件");

                    b.Property<int>("item")
                        .HasColumnType("integer")
                        .HasComment("明细item中的附件item");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("path")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("path");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer")
                        .HasComment("明细的item");

                    b.Property<string>("status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("tofn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("original filename");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx5");

                    b.ToTable("cash_file");
                });

            modelBuilder.Entity("ERS.Entities.CashHead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AdvanceStatus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("advance_status")
                        .HasComment("预支金状态");

                    b.Property<string>("BusinessTripNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("business_trip_no")
                        .HasComment("出差单号");

                    b.Property<string>("PaymentWay")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_way")
                        .HasComment("付款方式");

                    b.Property<string>("Program")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("program")
                        .HasComment("Uber出行方案");

                    b.Property<decimal?>("actualamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("approvereason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Approve Reason");

                    b.Property<string>("bank")
                        .HasColumnType("text");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("create user chinese name");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("companysap")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("SAP company code");

                    b.Property<string>("currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("deductionamount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("deduction_amount")
                        .HasComment("扣減金額(個人承擔稅金金額)");

                    b.Property<string>("deptid")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("dtype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("DOA type");

                    b.Property<string>("expensetype")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("報銷類型 F01:週轉金報銷 or F02:廠商報銷");

                    b.Property<string>("expensetypedesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("週轉金報銷 or 廠商報銷");

                    b.Property<string>("ext")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("base currency");

                    b.Property<string>("iscloudinvoice")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否是雲端電子發票");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("istemp")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否暂存(Y/N)");

                    b.Property<decimal?>("l2l3seq")
                        .HasColumnType("numeric(10,2)")
                        .HasComment("current sign sequence");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("originalcurrency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Original  CURRENCY");

                    b.Property<int>("overdueday")
                        .HasColumnType("integer")
                        .HasComment("逾期天数");

                    b.Property<string>("overduereason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("逾期原因");

                    b.Property<string>("overduerno")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("预支延期申请单号");

                    b.Property<string>("overduestatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("预支延期申请单号状态 status;T:temporary storage,P:process,A:approval,R:reject");

                    b.Property<int>("overduesum")
                        .HasColumnType("integer")
                        .HasComment("逾期次数");

                    b.Property<string>("payeeId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("payeeaccount")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("payeename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("payment")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("payment date");

                    b.Property<DateTime?>("paymentdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("付款日");

                    b.Property<string>("projectcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("requestamount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("request_amount")
                        .HasComment("申請總計金額");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Status; Y: available, N: Not available");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("状态");

                    b.Property<string>("unifycode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("統一編碼");

                    b.Property<string>("vendor")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("廠商");

                    b.Property<string>("vendordesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("廠商名稱");

                    b.Property<string>("welfare")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("welfare fund;Y/N");

                    b.Property<string>("whetherapprove")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("whether approve ");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx6");

                    b.ToTable("cash_head");
                });

            modelBuilder.Entity("ERS.Entities.CashUberDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("DeptId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("deptid");

                    b.Property<string>("Destination")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("destination");

                    b.Property<string>("Emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("emplid");

                    b.Property<string>("ExpCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("expcode");

                    b.Property<string>("FormCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("form_code");

                    b.Property<string>("Item")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("origin");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("reason");

                    b.Property<string>("Rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rno");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Rno", "FormCode", "Item" }, "cash_uber_detail_pk");

                    b.ToTable("cash_uber_detail");
                });

            modelBuilder.Entity("ERS.Entities.CashUberHead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessTripNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("business_trip_no");

                    b.Property<string>("Emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("emplid");

                    b.Property<string>("FormCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("form_code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Program")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("program");

                    b.Property<string>("ProjectCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("projectcode");

                    b.Property<string>("Rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rno");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasComment("状态");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Rno", "FormCode" }, "cash_uber_head_pk");

                    b.ToTable("cash_uber_head");
                });

            modelBuilder.Entity("ERS.Entities.ChargeAgainst", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rerno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("报销单号");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("预支金单号");

                    b.HasKey("Id");

                    b.ToTable("charge_against");
                });

            modelBuilder.Entity("ERS.Entities.CompanyAreaInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("公司别");

                    b.Property<string>("companyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company_code")
                        .HasComment("公司代码，与员工所属公司代码串，确认此公司代码下的员工可以填哪些公司别");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("site")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("工作地，TW相同公司代码下工作地可能不一样，可选公司别也要不一样");

                    b.HasKey("Id");

                    b.ToTable("compant_area_info");
                });

            modelBuilder.Entity("ERS.Entities.CompanyUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("公司别");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("工号");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("compant_user");
                });

            modelBuilder.Entity("ERS.Entities.Comtaxcode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("paymentmethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("taxcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("taxcourse")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("稅金的科目");

                    b.Property<string>("taxexpense")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("稅金的Taxcode");

                    b.HasKey("Id");

                    b.ToTable("comtaxcode");
                });

            modelBuilder.Entity("ERS.Entities.CorporateRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("營業人名稱");

                    b.Property<string>("unifiedNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("統一編號");

                    b.Property<string>("updateTime")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("資料更新時間");

                    b.Property<string>("usesInvoice")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("使用統一發票");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "unifiedNo" }, "unifiedNo_idx");

                    b.ToTable("corporate_registration");
                });

            modelBuilder.Entity("ERS.Entities.CustomerNickname", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("iscarry")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否帶暱稱(Y/N)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("客戶名稱");

                    b.Property<string>("nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("客戶暱稱");

                    b.HasKey("Id");

                    b.ToTable("customer_nickname");
                });

            modelBuilder.Entity("ERS.Entities.DataDictionary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category")
                        .HasComment("類別");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description")
                        .HasComment("說明");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("名稱");

                    b.Property<string>("NameCz")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_cz")
                        .HasComment("名稱(捷克語)");

                    b.Property<string>("NameEs")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_es")
                        .HasComment("名稱(西語)");

                    b.Property<string>("NameVn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_vn")
                        .HasComment("名稱(越語)");

                    b.Property<string>("NameZhcn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_zhcn")
                        .HasComment("名稱(簡中)");

                    b.Property<string>("NameZhtw")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_zhtw")
                        .HasComment("名稱(繁中)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order")
                        .HasComment("排序序號");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value")
                        .HasComment("值");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Category" }, "data_dictionary_idx_category");

                    b.ToTable("data_dictionary");
                });

            modelBuilder.Entity("ERS.Entities.DataDictionaryCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("criteria")
                        .HasComment("條件");

                    b.Property<Guid>("DictionaryId")
                        .HasColumnType("uuid")
                        .HasColumnName("dictionary_id")
                        .HasComment("data_dictionary_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DictionaryId" }, "data_dictionary_criteria_idx_dictionary_id");

                    b.ToTable("data_dictionary_criteria");
                });

            modelBuilder.Entity("ERS.Entities.Doa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("dtype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("DOA type");

                    b.Property<decimal?>("eamt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("End amount");

                    b.Property<DateTime>("effdate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("effective date");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("samt")
                        .HasColumnType("numeric(18,2)")
                        .HasComment("Start amount");

                    b.Property<int>("treeLevelnum")
                        .HasColumnType("integer")
                        .HasComment("org tree level");

                    b.HasKey("Id");

                    b.ToTable("doa");
                });

            modelBuilder.Entity("ERS.Entities.DoaType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("dtype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("dtypedesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("doa_type");
                });

            modelBuilder.Entity("ERS.Entities.EAutono", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("date")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("no")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("e_autono");
                });

            modelBuilder.Entity("ERS.Entities.EFormAlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cemplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("seq")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal>("step")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("stepname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("e_form_alist");
                });

            modelBuilder.Entity("ERS.Entities.EFormAlistHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cemplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal>("step")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("stepname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("e_form_alist_history");
                });

            modelBuilder.Entity("ERS.Entities.EFormAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("auditid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("edate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("sdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("e_form_audit");
                });

            modelBuilder.Entity("ERS.Entities.EFormAuser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cemplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("seq")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("used")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("e_form_auser");
                });

            modelBuilder.Entity("ERS.Entities.EFormContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("chinesecontact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("englisthcontact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("e_form_contact");
                });

            modelBuilder.Entity("ERS.Entities.EFormFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("addsuper")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("add supervisor");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formstart")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("joint")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("joint signature,N:任一簽核人通過就到下一關,Y:所有人都要簽");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("nstep")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("next step");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("supervisor role,L1:課級,L2:部級,L3:廠處級,A:?單人,B:接收人,C:移出人,SQL,ALL部?的全部人");

                    b.Property<string>("roletype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("supervisor role type,DEPT:部門,EMPLID:工號,BD:BaseData");

                    b.Property<decimal>("step")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("stepname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("e_form_flow");
                });

            modelBuilder.Entity("ERS.Entities.EFormHead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("adduser")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("add user approval,P:之前,N:之後");

                    b.Property<string>("apid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("approval link application");

                    b.Property<string>("archivestatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("archivestatus归档状态 wishare,N:待归档,Y:已归档");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cemplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("nemplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Next approval emplid");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("status;T:temporary storage,P:process,A:approval,R:reject");

                    b.Property<decimal?>("step")
                        .HasColumnType("numeric(8,2)");

                    b.HasKey("Id");

                    b.ToTable("e_form_head");
                });

            modelBuilder.Entity("ERS.Entities.EFormProxy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("edate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("proxy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("sdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("userid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("e_form_proxy");
                });

            modelBuilder.Entity("ERS.Entities.EFormSignlog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("adate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("approval date");

                    b.Property<string>("aemplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("approval emplid");

                    b.Property<string>("aename")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("aname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("aremark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("aresult")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("astepname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cemplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("isadduser")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("Y:add user approval log");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("seq")
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("step")
                        .HasColumnType("numeric(8,2)");

                    b.HasKey("Id");

                    b.ToTable("e_form_signlog");
                });

            modelBuilder.Entity("ERS.Entities.Empchs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("scname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("empchs");
                });

            modelBuilder.Entity("ERS.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("adult")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("atvalid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("calendar")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cardid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cname")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("deptn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descrshort")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<string>("empl_category")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<string>("ename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("hdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("l1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("mail")
                        .HasMaxLength(280)
                        .HasColumnType("character varying(280)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("nxtapprove")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("officer_level")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ot_etime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ot_stime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("otlimit")
                        .HasColumnType("integer");

                    b.Property<string>("otvalid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("phone")
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)");

                    b.Property<string>("plant")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("proxy")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("proxytime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rehire_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("supervisor")
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<string>("tdate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("treason")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("udate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("upper_dept")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("userid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "emplid" }, "emplid_idx")
                        .HasDatabaseName("emplid_idx1");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("ERS.Entities.EmployeeInfo", b =>
                {
                    b.Property<string>("emplid")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("bg")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("bu")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("email_address_a")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("emailid")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateTime>("hire_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("job_family")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("jobcode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("jobtitle_descr")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("labor_type")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime?>("last_hire_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("last_updt_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("name_a")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("officer_level_a")
                        .HasColumnType("numeric");

                    b.Property<string>("phone_a")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("plant")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("sal_location")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("sal_location_a")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("site")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("supervisor_id")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<decimal?>("supv_lvl_id")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("termination_dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("tree_level")
                        .HasColumnType("numeric");

                    b.Property<decimal>("tree_level_num")
                        .HasColumnType("numeric");

                    b.HasKey("emplid");

                    b.ToTable("employeeinfo");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrg", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("descr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descr_d")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("flag")
                        .HasColumnType("integer");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("manager_id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant_id_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sal_location_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("tree_level_num")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("uporg_code_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "deptid" }, "deptid_idx");

                    b.ToTable("emp_org");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrgCohead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("flag")
                        .HasColumnType("integer");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("manager_id")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("emp_org_cohead");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrgCross", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("descr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descr_a")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("flag")
                        .HasColumnType("integer");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("manager_id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant_id_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sal_location_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("tree_level_num")
                        .HasColumnType("integer");

                    b.Property<string>("uporg_code_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("emp_org_cross");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrgCrossPs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("descr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descr_a")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("flag")
                        .HasColumnType("integer");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("manager_id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant_id_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sal_location_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("tree_level_num")
                        .HasColumnType("integer");

                    b.Property<string>("uporg_code_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("emp_org_cross_ps");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrgLv", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("descr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descr_a")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("officer_level")
                        .HasColumnType("text");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("stat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("tree_level")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("tree_level_num")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("emp_org_lv");
                });

            modelBuilder.Entity("ERS.Entities.EmpOrgStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("descr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("descr_a")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("flag")
                        .HasColumnType("integer");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("location")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("manager_id")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant_id_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sal_location_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("tree_level_num")
                        .HasColumnType("integer");

                    b.Property<string>("uporg_code_a")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("emp_org_standard");
                });

            modelBuilder.Entity("ERS.Entities.ExpenseSenarioExtraSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("approver_emplid")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasComment("簽核人員工號");

                    b.Property<string>("approver_name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("簽核人員姓名");

                    b.Property<string>("approver_name_a")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("簽核人員別名");

                    b.Property<Guid>("bdexp_id")
                        .HasColumnType("uuid")
                        .HasComment("bdexp table FK");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("exp_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("費用代碼");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("步驟名稱");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("步驟位置");

                    b.HasKey("Id");

                    b.ToTable("expense_senario_extra_steps");
                });

            modelBuilder.Entity("ERS.Entities.ExtraSteps", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApproverEmplid")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("approver_emplid")
                        .HasComment("簽核人員工號");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("approver_name")
                        .HasComment("簽核人員姓名");

                    b.Property<string>("ApproverNameA")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("approver_name_a")
                        .HasComment("簽核人員別名");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name")
                        .HasComment("步驟名稱");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("position")
                        .HasComment("步驟位置");

                    b.Property<Guid>("SenarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("senario_id")
                        .HasComment("報銷情景ID");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SenarioId" }, "extra_steps_idx_senarioid");

                    b.ToTable("extra_steps");
                });

            modelBuilder.Entity("ERS.Entities.Finreview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("category")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasComment("单据类型，0：报销预支；1：薪资请款");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company_code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("item")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("plant")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rv1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("rv2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("rv3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("finreview");
                });

            modelBuilder.Entity("ERS.Entities.HelpManual", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("path")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("help_manual");
                });

            modelBuilder.Entity("ERS.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("abnormal")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasComment("是否异常报销上传的（Y/N）");

                    b.Property<decimal>("abnormalamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("abnormalmsg")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("异常信息");

                    b.Property<string>("abnormalreason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("异常原因");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("curr")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("invabnormalreason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("发票异常原因");

                    b.Property<string>("invcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("invdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("invno")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("invoiceid")
                        .HasColumnType("uuid")
                        .HasComment("票夹发票id");

                    b.Property<string>("invstat")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("invtype")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("发票类型");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("item")
                        .HasColumnType("integer")
                        .HasComment("明细item中的附件item");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("oamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sellerTaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seller_tax_id")
                        .HasComment("销售方税号");

                    b.Property<int>("seq")
                        .HasColumnType("integer")
                        .HasComment("明细的item");

                    b.Property<string>("source")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("票據來源");

                    b.Property<decimal>("taxamount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("taxloss")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("undertaker")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("underwriter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("承担人");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "rno" }, "rno_idx")
                        .HasDatabaseName("rno_idx7");

                    b.ToTable("invoice");
                });

            modelBuilder.Entity("ERS.Entities.MailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("mail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("maillog");
                });

            modelBuilder.Entity("ERS.Entities.Mailtemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("apid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("helpdesk")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("mailmsg")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("mailtype")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("seq")
                        .HasColumnType("integer");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("mailtemple");
                });

            modelBuilder.Entity("ERS.Entities.MealFee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("area")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("backtime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("backtime2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("backtimestate")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("gotime")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("gotime2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("gotimestate")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("mealfee");
                });

            modelBuilder.Entity("ERS.Entities.MobileCallBackLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("messageid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("signresult")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("mobile_call_back_log");
                });

            modelBuilder.Entity("ERS.Entities.OCRResults", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount")
                        .HasComment("發票金額");

                    b.Property<decimal?>("AmountA")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_a")
                        .HasComment("金額");

                    b.Property<decimal?>("AmountB")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_b")
                        .HasComment("金額");

                    b.Property<decimal?>("AmountC")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount_c")
                        .HasComment("金額");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("buyer_name")
                        .HasComment("購貨方名稱");

                    b.Property<string>("BuyerTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("buyer_tax_id")
                        .HasComment("購買方稅號");

                    b.Property<string>("Currency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currency")
                        .HasComment("幣別");

                    b.Property<string>("EndStation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("end_station")
                        .HasComment("抵達站");

                    b.Property<string>("IdentificationNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("identification_no")
                        .HasComment("存票據上唯一值識別碼");

                    b.Property<decimal?>("ImportTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("import_tax_amount")
                        .HasComment("進口稅");

                    b.Property<string>("InvoiceCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_code")
                        .HasComment("發票代碼");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invoice_date")
                        .HasComment("發票日期");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_no")
                        .HasComment("發票號碼");

                    b.Property<string>("InvoiceTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("invoice_title")
                        .HasComment("發票標題");

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_type")
                        .HasComment("發票類型名稱");

                    b.Property<string>("InvoiceTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_type_code")
                        .HasComment("發票類型代碼");

                    b.Property<string>("ProductInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("product_info")
                        .HasComment("商品資訊");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("quantity")
                        .HasComment("數量");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region")
                        .HasComment("發票區域");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("remarks")
                        .HasComment("備註");

                    b.Property<string>("SellerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("seller_name")
                        .HasComment("銷售方名稱");

                    b.Property<string>("SellerTaxId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("seller_tax_id")
                        .HasComment("銷售方稅號");

                    b.Property<string>("SereialNoA")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sereial_no_a")
                        .HasComment("流水號/編碼");

                    b.Property<string>("SereialNoB")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sereial_no_b")
                        .HasComment("流水號/編碼");

                    b.Property<string>("SereialNoC")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sereial_no_c")
                        .HasComment("流水號/編碼");

                    b.Property<decimal?>("ServiceFee")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("service_fee")
                        .HasComment("服務費/推廣貿易服務費");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("shipping_fee")
                        .HasComment("運輸費");

                    b.Property<string>("StartStation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("start_station")
                        .HasComment("出發站");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("tax_amount")
                        .HasComment("營業/增值稅額");

                    b.Property<decimal?>("TaxBase")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("tax_base")
                        .HasComment("營業/增值税基");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate")
                        .HasComment("營業/增值稅率");

                    b.Property<decimal?>("TransactionFee")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("transaction_fee")
                        .HasComment("手續費");

                    b.Property<decimal?>("UnTaxAmount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("un_tax_amount")
                        .HasComment("不含稅金額");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdentificationNo" }, "ocr_results_idx_identification_no");

                    b.ToTable("ocr_results");
                });

            modelBuilder.Entity("ERS.Entities.Payment.CashPaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amt")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amt")
                        .HasComment("金额");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank")
                        .HasComment("银行名称");

                    b.Property<string>("BaseCurr")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("basecurr")
                        .HasComment("币别");

                    b.Property<string>("Contnt")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contnt")
                        .HasComment("摘要");

                    b.Property<string>("DeptId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("deptid")
                        .HasComment("部门代码");

                    b.Property<string>("DocNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("docno")
                        .HasComment("传票号");

                    b.Property<string>("FormCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("formcode")
                        .HasComment("单据类型代码");

                    b.Property<string>("Identification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("identification")
                        .HasComment("会计");

                    b.Property<string>("PayeeAccount")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("payeeaccount")
                        .HasComment("银行卡号");

                    b.Property<string>("PayeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payeeid")
                        .HasComment("收款人");

                    b.Property<string>("PaymentCurr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("paymentcurr")
                        .HasComment("付款币别");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date")
                        .HasComment("付款日期");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("paymentid")
                        .HasComment("付款人");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("paymentmethod")
                        .HasComment("付款方式");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("postdate")
                        .HasComment("PostDate");

                    b.Property<string>("Rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rno")
                        .HasComment("申请单号");

                    b.Property<string>("ScName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("scname")
                        .HasComment("收款人名字");

                    b.Property<string>("Seq")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("seq")
                        .HasComment("seq");

                    b.Property<string>("Stat")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("stat")
                        .HasComment("状态");

                    b.Property<int>("SysItem")
                        .HasColumnType("integer")
                        .HasColumnName("sysitem")
                        .HasComment("sysitem");

                    b.Property<string>("SysNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sysno")
                        .HasComment("付款流水号");

                    b.Property<string>("TemSign")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("temsign")
                        .HasComment("temsign");

                    b.Property<string>("Usage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usage")
                        .HasComment("类别");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SysNo" }, "sysno_idx");

                    b.ToTable("cash_payment_detail");
                });

            modelBuilder.Entity("ERS.Entities.Payment.CashPaymentHead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amt")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amt")
                        .HasComment("金额");

                    b.Property<DateTime?>("ApproverDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approver_date")
                        .HasComment("签核时间");

                    b.Property<string>("ApproverEmplid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("approver_emplid")
                        .HasComment("實際簽核人工號");

                    b.Property<string>("ApproverName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("approver_name")
                        .HasComment("實際簽核人姓名");

                    b.Property<DateTime?>("ApproverRemark")
                        .HasMaxLength(200)
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approver_remark")
                        .HasComment("签核意见");

                    b.Property<string>("AssignedEmplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("assigned_emplid")
                        .HasComment("应签核人工号");

                    b.Property<string>("AssignedName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("assigned_name")
                        .HasComment("签核人名字");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank")
                        .HasComment("银行名称");

                    b.Property<string>("Identification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("identification")
                        .HasComment("Payment Run會計");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date")
                        .HasComment("付款日期");

                    b.Property<string>("PaymentDocNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_docno")
                        .HasComment("付款传票号");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status")
                        .HasComment("Payment状态");

                    b.Property<string>("Seq")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("seq")
                        .HasComment("seq");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("stutus")
                        .HasComment("状态");

                    b.Property<string>("SysNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sysno")
                        .HasComment("付款流水号");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SysNo" }, "sysno_idx")
                        .HasDatabaseName("sysno_idx1");

                    b.ToTable("cash_payment_head");
                });

            modelBuilder.Entity("ERS.Entities.PmcsPjCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("am")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("budgetenddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("budgetstartdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("chargedept")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("classification")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("code")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("custnickname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("iscreatedbyprjpnl")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("lastupdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("lifecycle")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ordertype")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("pm")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("profitcenter")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("remark")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("Id");

                    b.ToTable("pmcs_pjcode");
                });

            modelBuilder.Entity("ERS.Entities.ProxyCash", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("aemplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("报销人工号");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("remplid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("代报销人工号");

                    b.HasKey("Id");

                    b.ToTable("proxy_cash");
                });

            modelBuilder.Entity("ERS.Entities.SAPExchRate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ccurdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ccurfrom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("ccurrate")
                        .HasColumnType("numeric(10,5)");

                    b.Property<string>("ccurto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ccurtype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("date_fm")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("有效起始日");

                    b.Property<DateTime?>("date_to")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("有效终止日");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("ratiofrom")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("ratioto")
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("sap_exch_rate");
                });

            modelBuilder.Entity("ERS.Entities.SendMobileFileLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("fileId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("filename")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("filesize")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("messageid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("send_mobile_file_log");
                });

            modelBuilder.Entity("ERS.Entities.SendMobileLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("deptid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("emplid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("formcode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("messageid")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("recallcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("recallmessage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("recallstatus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("rno")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sendreturncode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("sendreturnmessage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sendstatus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("seq")
                        .HasMaxLength(20)
                        .HasColumnType("numeric");

                    b.Property<string>("signstatus")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("step")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("send_mobile_log");
                });

            modelBuilder.Entity("ERS.Entities.SuperCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("area")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("in: 园区内；out: 园区外");

                    b.Property<decimal>("budget")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("categoryid")
                        .HasColumnType("integer");

                    b.Property<string>("categoryname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("isreimbursable")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("supercategory");
                });

            modelBuilder.Entity("ERS.Entities.Uber.UberTransactionalDay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city")
                        .HasComment("城市");

                    b.Property<string>("Company")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company")
                        .HasComment("公司别");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("distance")
                        .HasComment("距離 （mi）");

                    b.Property<string>("DropOffAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("drop_off_address")
                        .HasComment("下车位址");

                    b.Property<DateTime?>("DropOffDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("drop_off_date")
                        .HasComment("下车日期 （當地）");

                    b.Property<DateTimeOffset?>("DropOffDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("drop_off_date_utc")
                        .HasComment("下车日期 （UTC）");

                    b.Property<string>("DropOffTime")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("drop_off_time")
                        .HasComment("下车時間 （當地）");

                    b.Property<string>("DropOffTimeUtc")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("drop_off_time_utc")
                        .HasComment("下车時間 （UTC）");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration")
                        .HasComment("总時間 （min）");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email")
                        .HasComment("電子郵件");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("employee_id")
                        .HasComment("員工ID");

                    b.Property<decimal?>("EstimatedServiceAndTechnologyFee")
                        .HasColumnType("numeric")
                        .HasColumnName("estimated_service_and_technology_fee")
                        .HasComment("以本國貨幣計算的預計服務費和技術費用（包括稅費，如有）");

                    b.Property<string>("ExpenseCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("expense_code")
                        .HasComment("費用代碼");

                    b.Property<string>("ExpenseMemo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("expense_memo")
                        .HasComment("費用備忘錄");

                    b.Property<decimal?>("FareInHomeCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("fare_in_home_currency")
                        .HasComment("以本國貨幣計算的票價（不含稅）");

                    b.Property<decimal?>("FareInLocalCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("fare_in_local_currency")
                        .HasComment("以當地貨幣計算的票價（不含稅）");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_name")
                        .HasComment("资料来源文件名");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name")
                        .HasComment("名字");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("group")
                        .HasComment("群");

                    b.Property<string>("Invoices")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoices")
                        .HasComment("發票");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name")
                        .HasComment("姓");

                    b.Property<string>("LocalCurrencyCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("local_currency_code")
                        .HasComment("本地貨幣代碼");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method")
                        .HasComment("付款方式");

                    b.Property<string>("PickupAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pickup_address")
                        .HasComment("上车位址");

                    b.Property<string>("Program")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("program")
                        .HasComment("方案");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date")
                        .HasComment("预约日期 （本地）");

                    b.Property<DateTime?>("RequestDateUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date_utc")
                        .HasComment("预约日期 （UTC）");

                    b.Property<string>("RequestTime")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("request_time")
                        .HasComment("预约時間 （本地）");

                    b.Property<string>("RequestTimeUtc")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("request_time_utc")
                        .HasComment("预约時間 （UTC）");

                    b.Property<string>("RequestTimezoneOffsetFromUtc")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("request_timezone_offset_from_utc")
                        .HasComment("請求與UTC的時區偏移量");

                    b.Property<string>("Service")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("service")
                        .HasComment("服務");

                    b.Property<string>("SignStatus")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sign_status")
                        .HasComment("签核状态(P,已送单;A,已签核;R,已驳回)");

                    b.Property<decimal?>("TaxesInHomeCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("taxes_in_home_currency")
                        .HasComment("本幣稅費");

                    b.Property<decimal?>("TaxesInLocalCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("taxes_in_local_currency")
                        .HasComment("以當地貨幣表示的稅費");

                    b.Property<decimal?>("TipInHomeCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("tip_in_home_currency")
                        .HasComment("本幣中的小費");

                    b.Property<decimal?>("TipInLocalCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("tip_in_local_currency")
                        .HasComment("以當地貨幣打賞");

                    b.Property<decimal?>("TransactionAmountInHomeCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("transaction_amount_in_home_currency")
                        .HasComment("以本幣表示的交易金額（含稅）");

                    b.Property<decimal?>("TransactionAmountInLocalCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("transaction_amount_in_local_currency")
                        .HasComment("以當地貨幣表示的交易金額（含稅）");

                    b.Property<DateTimeOffset?>("TransactionTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_timestamp")
                        .HasComment("交易時間戳 （UTC）");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_type")
                        .HasComment("交易類型");

                    b.Property<Guid?>("TripId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_id")
                        .HasComment("Trip/Eats ID");

                    b.Property<DateTime?>("cdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("cuser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("mdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("muser")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("rno")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("申请单号");

                    b.HasKey("Id");

                    b.ToTable("uber_transactional_day");
                });
#pragma warning restore 612, 618
        }
    }
}
